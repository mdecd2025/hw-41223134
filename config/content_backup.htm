<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站:<a href="https://mdecd2025.github.io/hw-41223134">https://mdecd2025.github.io/hw-41223134</a></p>
<p>學員作業倉儲:<a href="https://github.com/mdecd2025/hw-41223134"></a><a href="https://github.com/mdecd2025/hw-41223134">https://github.com/mdecd2025/hw-41223134</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>上課內容</h1>
<h2>w1</h2>
<p>利用程式方法列出組別及組員的作業倉儲與網頁連結</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/md5d69fG7S0" width="560"></iframe></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容
# 而所導入的 document 可以指向網頁中的特定 id 內容
from browser import html, document
# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2a.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串
print("總共有 " + str(len(all_stud)) + "名學員")
# 
# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應
brython_div1 = document["brython_div1"]
# 利用 Brython 的 "&lt;=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置
# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference
brython_div1 &lt;= "1. " + html.A("2a-ag4", href="https://mdecd2025.github.io/2a-ag4/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag4")
# 利用 html.BR() 插入 break 標註
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "2. " + html.A("41223118", href="https://mdecd2025.github.io/hw-zhe41223118/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-zhe41223118")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "3. " + html.A("41223122", href="https://mdecd2025.github.io/hw-Spirit0224/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-Spirit0224")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "4. " + html.A("41223131", href="https://https://mdecd2025.github.io/hw-yuhao-08/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-yuhao-08")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "5. " + html.A("41223134", href="https://https://mdecd2025.github.io/hw-41223134")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223134")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "6. " + html.A("41223136", href="https://mdecd2025.github.io/hw-41223136/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223136")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "7. " + html.A("41223158", href="https://mdecd2025.github.io/hw-41223158")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223158")</pre>
<p>1. <a href="https://mdecd2025.github.io/2a-ag4/">2a-ag4</a><a href="https://github.com/mdecd2025/2a-ag4">(repo)</a><br/>2. <a href="https://mdecd2025.github.io/hw-zhe41223118/">41223118</a><a href="https://github.com/mdecd2025/hw-zhe41223118">(repo)</a><br/>3. <a href="https://mdecd2025.github.io/hw-Spirit0224/">41223122</a><a href="https://github.com/mdecd2025/hw-Spirit0224">(repo)</a><br/>4. <a href="https://https//mdecd2025.github.io/hw-yuhao-08/">41223131</a><a href="https://github.com/mdecd2025/hw-yuhao-08">(repo)</a><br/>5. <a href="https://https//mdecd2025.github.io/hw-41223134">41223134</a><a href="https://github.com/mdecd2025/hw-41223134">(repo)</a><br/>6. <a href="https://mdecd2025.github.io/hw-41223136/">41223136</a><a href="https://github.com/mdecd2025/hw-41223136">(repo)</a><br/>7. <a href="https://mdecd2025.github.io/hw-41223158">41223158</a><a href="https://github.com/mdecd2025/hw-41223158">(repo)</a></p>
<h2>w3</h2>
<p><span>列出本班目前尚未納入分組的學員名單。</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 甲班學員資料處理
url = "https://mde.tw/list/2a.txt"
data = open(url).readlines()
all_stud = data[1:]
a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
 
# 顯示甲班標題
print("甲班:")
for i in all_stud:
    drop_n = i.rstrip("\n")
    stud = drop_n.split("\t")
    stud_num = stud[0]
    stud_github = stud[1]
    if stud_github not in a_all_members:
        print(stud_num)
 </pre>
<p>甲班:<br/>41023220<br/>41223111<br/>41223119<br/>41223124<br/>41223148</p>
<h2>w4</h2>
<p><span>已知目前學員的作業倉儲無法在 IPv6 位址設定時正確運作，必須下載 </span><a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a>，<span>解開壓縮檔案後，替換倉儲中的 cmsimde 目錄</span></p>
<p><span>使用ipv6</span>維護網站<span>步驟:</span></p>
<p>關閉ipv4</p>
<p><span><img caption="false" height="328" src="/images/螢幕擷取畫面 2025-04-24 170810.png" width="250"/></span></p>
<p><span>a0xx依照<a href="https://mde.tw/cd2025/downloads/w4_2a_index.txt">w4_2a_index.txt</a>輸入序號</span></p>
<p><span><img caption="false" height="223" src="/images/螢幕擷取畫面 2025-04-24 170705.png" width="270"/></span></p>
<p><span><img caption="false" height="245" src="/images/螢幕擷取畫面 2025-04-24 170840.png" width="250"/></span></p>
<p><span><span style="background-color: #ccffcc;"><span style="background-color: #ffffff;">git@(.ppk名稱):(倉儲帳號)/(倉儲分支名稱).git </span></span></span></p>
<p><span><img caption="false" height="182" src="/images/螢幕擷取畫面 2025-04-24 170858.png" width="250"/></span></p>
<p><span>在近端輸入</span></p>
<p>cd <span style="background-color: #ffffff;">(進入資料夾位置)</span></p>
<p><span style="background-color: #ffffff;">git pull</span></p>
<p>cms <span style="background-color: #ffffff;">(啟動近端)</span></p>
<p><span style="background-color: #ffffff;">取得連結後即可進入個人網站</span></p>
<h2>w5</h2>
<p>Webots初學者導引課程</p>
<p>1. 啟動 Webots：在您的電腦上打開 Webots (假如使用協同產品設計課程的可攜套件，啟動後在命令列中輸入 webotsw 即可開啟 Webots)。</p>
<p style="padding-left: 30px;">實作 #1：通過雙擊 Webots 圖標（或在終端中從命令行調用）來啟動 Webots。如果您是第一次在此電腦上運行 Webots，可能會提示您選擇圖形主題。您也可能被邀請參加 Webots 指導遊覽，請關閉指導遊覽。</p>
<p>2. 創建新世界：<br/>    - 轉到 File -&gt; New World。<br/>    - 使用適當的名稱保存新世界文件，例如 my_first_simulation.wbt。</p>
<p>3. 添加競技場：<br/>    - 在場景樹中，右鍵點擊 root 並選擇 Add New -&gt; Solid。<br/>    - 將新固體重命名為 arena 並為其添加 Shape。<br/>    - 將其幾何形狀設置為 Box，並設置適當的尺寸（例如，1m x 1m x 0.01m）來表示地板。<br/>    - 為形狀添加 Material 並設置其顏色。</p>
<p style="padding-left: 30px;">實作 #2：通過點擊 3D 視圖的暫停按鈕來暫停當前模擬（請參閱用戶界面描述以找到按鈕）。如果主工具欄上的虛擬時間計數器停止，則模擬被暫停。從 File / New / New Project Directory... 菜單項創建一個新項目並按照說明進行：<br/><br/>1. 將項目目錄命名為 my_first_simulation，而不是建議的 my_project。<br/>2. 將世界文件命名為 my_first_simulation.wbt，而不是建議的 empty.wbt。<br/>3. 點擊所有選框，包括默認未選中的 "Add a rectangle arena"。</p>
<p>4. 添加牆壁：<br/>    - 重複該過程以在競技場周圍添加四面牆壁。<br/>    - 調整它們的位置和尺寸以適合地板周圍。</p>
<p style="padding-left: 30px;">實作 #3：在場景樹中雙擊 RectangleArena 節點。這應該會打開該節點並顯示其字段。<br/><br/>1. 選擇 floorTileSize 字段並將其值設置為 0.25 0.25 而不是 0.5 0.5。您應該立即在 3D 視圖中看到效果。<br/>2. 選擇 wallHeight 字段並將其值更改為 0.05 而不是 0.1。競技場的牆壁現在應該變得更低。</p>
<p>5. 添加箱子：<br/>    - 在競技場內添加幾個箱子作為障礙物。<br/>    - 根據您的喜好設置它們的位置和尺寸。</p>
<p style="padding-left: 30px;">實作 #4：在場景樹中雙擊 RectangleArena 以將其關閉並選中它。點擊場景樹頂部的添加按鈕。在打開的對話框中，選擇 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid)。一個大箱子應該會出現在競技場的中央。在場景樹中雙擊它以打開其字段。<br/><br/>1. 將其尺寸更改為 0.1 0.1 0.1 而不是 0.6 0.6 0.6。<br/>2. 將其平移更改為 0 0 0.05 而不是 0 0 0.3。或者，您可以使用 3D 視圖中出現的藍色箭頭來調整其 translation.z 字段。<br/>3. 現在按住 Shift 鍵並在 3D 視圖中拖動箱子，將其移動到競技場的某個角落。<br/>4. 選擇箱子並按 ctrl-C，ctrl-V（Windows，Linux）或 ⌘ command-C，⌘ command-V（macOS）來複製和粘貼它。按住 Shift 鍵並拖動新箱子將其移動到某個不同的位置。以這種方式創建第三個箱子。<br/>5. 移動箱子，使競技場中央沒有箱子。您也可以使用藍色旋轉箭頭沿垂直軸旋轉箱子。這也可以通過按住 Shift 鍵並用右鍵拖動來完成。或者，您可以更改場景樹中 WoodenBox 節點的旋轉字段的角度。<br/>6. 一旦您對結果滿意，請使用保存按鈕保存世界。</p>
<p>6. 添加 e-puck 機器人：<br/>    - 在場景樹中，右鍵點擊 root 並選擇 Add New -&gt; Robot。<br/>    - 從可用機器人列表中選擇 e-puck 機器人。</p>
<p style="padding-left: 30px;">實作 #5：選擇場景樹視圖中的最後一個節點 WoodenBox。點擊場景樹視圖頂部的添加按鈕。在對話框中，選擇 PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot)。一個 e-puck 機器人應該會出現在競技場的中央。像移動和旋轉箱子一樣移動和旋轉這個機器人。保存模擬並按下實時運行按鈕。</p>
<p>7. 創建控制程式：<br/>    - 在場景樹中右鍵點擊 e-puck 並選擇 Add New -&gt; Controller。<br/>    - 創建一個新的控制器文件（例如，epuck_controller.c）並編寫一個簡單的程式來使機器人移動。例如：</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_18755">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">controller </code><code class="py keyword">import</code> <code class="py plain">Robot, Motor  </code><code class="py comments"># 從 controller 模組導入 Robot 和 Motor 類別</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="py plain">TIME_STEP </code><code class="py keyword">=</code> <code class="py value">64</code>  <code class="py comments"># 設置時間步長為 64 毫秒</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py comments"># 創建 Robot 實例</code></div>
<div class="line number6 index5 alt1"><code class="py plain">robot </code><code class="py keyword">=</code> <code class="py plain">Robot()</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="py comments"># 擷取電機設備</code></div>
<div class="line number9 index8 alt2"><code class="py plain">leftMotor </code><code class="py keyword">=</code> <code class="py plain">robot.getDevice(</code><code class="py string">'left wheel motor'</code><code class="py plain">)  </code><code class="py comments"># 獲取左側輪子電機設備</code></div>
<div class="line number10 index9 alt1"><code class="py plain">rightMotor </code><code class="py keyword">=</code> <code class="py plain">robot.getDevice(</code><code class="py string">'right wheel motor'</code><code class="py plain">)  </code><code class="py comments"># 獲取右側輪子電機設備</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># 設置電機的目標位置</code></div>
<div class="line number13 index12 alt2"><code class="py plain">leftMotor.setPosition(</code><code class="py value">10.0</code><code class="py plain">)  </code><code class="py comments"># 設置左側輪子電機的目標位置為 10.0</code></div>
<div class="line number14 index13 alt1"><code class="py plain">rightMotor.setPosition(</code><code class="py value">10.0</code><code class="py plain">)  </code><code class="py comments"># 設置右側輪子電機的目標位置為 10.0</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"><code class="py keyword">while</code> <code class="py plain">robot.step(TIME_STEP) !</code><code class="py keyword">=</code> <code class="py keyword">-</code><code class="py value">1</code><code class="py plain">:  </code><code class="py comments"># 當機器人步進時間步長不等於 -1 時（模擬仍在運行）</code></div>
<div class="line number17 index16 alt2"><code class="py spaces">    </code><code class="py keyword">pass</code>  <code class="py comments"># 什麼也不做，保持循環運行</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>8. 保存並運行模擬：<br/>    - 保存您的世界文件。<br/>    - 點擊 Play 按鈕運行模擬並觀察機器人移動。</p>
<h2>w6</h2>
<p><span>如何啟動webots：在本學期可攜程式的start.bat中，已經有在可攜上啟動的程式，只需確認</span><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a><span> 是否放入可攜套件(</span><span><a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a></span><span>)的 data 目錄中，在可攜裡面輸入<span style="background-color: #ccffff;">webotsw</span>即可開啟，<span style="background-color: #ccffff;">開啟時系統會跳出防火牆警告，一定要選擇允許否則會被擋</span></span></p>
<h2>w7</h2>
<h4>使用 Solvespace 建立投籃機零組件</h4>
<p><img alt="" height="385" src="/images/螢幕擷取畫面 2025-04-23 010503.png" width="400"/></p>
<p>零件&amp;組合操作影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PCTdZbt5ugk" width="560"></iframe></p>
<p>檔案:<a href="/downloads/投籃機.7z">零件+組合圖</a></p>
<h2>w8</h2>
<p>根據<span> </span><a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a><span> </span>節點的用法說明, SolidReference 可以用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境 &lt;static environment&gt;。通過這種方式，可以閉合機械迴圈。</p>
<p>當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是某個共同上層 Solid 的下層。</p>
<p>意思即 SolidReference 是一個引用類型，允許在 Joint 節點的 endPoint 欄位中指定某個目標。</p>
<p>它可以指向兩種類型的對象：</p>
<ol>
<li>現有的 Solid：這是一個具體的實體（例如某個機械零件或組件），但這個 Solid 和 Joint 必須是某個共同上層 Solid 的下層。</li>
<li>靜態環境 &lt;static environment&gt;：這通常指的是不動的參考框架（例如地面或固定基座）。</li>
</ol>
<p>第一個情況:將 fourbar linkage 的 joint4 設置在 base link 的最右端，然後將 joint4 的 endPoint 欄位，設為 SolidReference 指向 link3，即可符合 Soild (link3) 與 Joint (joint4) 都是某個共同上層 Solid (base) 的下層。</p>
<p>第二個情況:將 fourbar linkage 的 joint4 設置在 link3 的末端，然後將 joint4 的 endPoint 欄位指向 &lt;static environment&gt;，讓 link3 的末端固定在 ground (其作用與固定在 base 節點相同)。</p>
<h2>w9</h2>
<p><span>在<a href="https://mdecd2025.github.io/hw-41223134/content/Midterm">Midterm</a>統整先前所完成的各週進度、心得和錄製期中自評影片。</span></p><h2>w10</h2>
<h2>w11</h2>
<h1>tasks</h1>
<h2>task1</h2>
<p>python版本更新影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/a4t3hBa_VnQ" width="560"></iframe><span></span></p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><span style="background-color: #ccffff;">Proxy type需改成HTTP CONNECT</span></p>
<p>設定完putty之後的步驟:</p>
<p>1.利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄</p>
<p>2.<span style="background-color: #ccffcc;"><span style="background-color: #ffffff;"><span>克隆指定的倉儲帳號下的分支</span></span></span></p>
<p><span style="background-color: #ccffcc;"><span style="background-color: #ffffff;"><span>  git clone --recurse-submodules git@w4-1:mde</span></span></span>cd2025/hw-41223134<span style="background-color: #ccffcc;"><span style="background-color: #ffffff;"><span>.git <br/></span></span></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9yVt_lS0CN0" width="560"></iframe></p>
<h2>task3</h2>
<h4>使用 Solvespace 建立平面四連桿系統零組件</h4>
<p>零件&amp;組合操作影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Y8y_4ZGxTfI" width="560"></iframe></p>
<p>檔案:<a href="/downloads/四連桿.7z">零件+組合圖</a></p>
<h2>task4</h2>
<p><span><a href="https://mdecd2025.github.io/2a-ag4/content/Brython.html?src=https://gist.githubusercontent.com/zhe41223118/de8d72a66126859139f42a25276bfa25/raw/1dd61ed37c8457f99353d5ddfd539bd27ff28a83/ag">2a分組網站與倉儲連結</a></span></p>
<p>列出本班尚未分組人員</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_527752">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># 甲班學員資料處理</code></div>
<div class="line number2 index1 alt1"><code class="py plain">url </code><code class="py keyword">=</code> <code class="py string">"https://mde.tw/list/2a.txt"</code></div>
<div class="line number3 index2 alt2"><code class="py plain">data </code><code class="py keyword">=</code> <code class="py functions">open</code><code class="py plain">(url).readlines()</code></div>
<div class="line number4 index3 alt1"><code class="py plain">all_stud </code><code class="py keyword">=</code> <code class="py plain">data[</code><code class="py value">1</code><code class="py plain">:]</code></div>
<div class="line number5 index4 alt2"><code class="py plain">a_all_members </code><code class="py keyword">=</code> <code class="py plain">[</code><code class="py string">'41223154'</code><code class="py plain">, </code><code class="py string">'41271125'</code><code class="py plain">, </code><code class="py string">'41271158'</code><code class="py plain">, </code><code class="py string">'41271146'</code><code class="py plain">, </code><code class="py string">'41271131'</code><code class="py plain">, </code><code class="py string">'CYG41223103'</code><code class="py plain">, </code><code class="py string">'41223102'</code><code class="py plain">, </code><code class="py string">'41023128'</code><code class="py plain">, </code><code class="py string">'41023137'</code><code class="py plain">, </code><code class="py string">'41223137'</code><code class="py plain">, </code><code class="py string">'41223157'</code><code class="py plain">, </code><code class="py string">'41223156'</code><code class="py plain">, </code><code class="py string">'otakuyoyo'</code><code class="py plain">, </code><code class="py string">'41223141'</code><code class="py plain">, </code><code class="py string">'41223113'</code><code class="py plain">, </code><code class="py string">'kim41223114'</code><code class="py plain">, </code><code class="py string">'joeisme1208'</code><code class="py plain">, </code><code class="py string">'41223116'</code><code class="py plain">, </code><code class="py string">'41223144'</code><code class="py plain">, </code><code class="py string">'41223140'</code><code class="py plain">, </code><code class="py string">'41223143'</code><code class="py plain">, </code><code class="py string">'41223138'</code><code class="py plain">, </code><code class="py string">'41223134'</code><code class="py plain">, </code><code class="py string">'41223136'</code><code class="py plain">, </code><code class="py string">'zhe41223118'</code><code class="py plain">, </code><code class="py string">'Spirit0224'</code><code class="py plain">, </code><code class="py string">'yuhao-08'</code><code class="py plain">, </code><code class="py string">'41223158'</code><code class="py plain">, </code><code class="py string">'Ren911308'</code><code class="py plain">, </code><code class="py string">'41223150'</code><code class="py plain">, </code><code class="py string">'Manto8'</code><code class="py plain">, </code><code class="py string">'CYA41223106'</code><code class="py plain">, </code><code class="py string">'yan21ed'</code><code class="py plain">, </code><code class="py string">'Lin41223107'</code><code class="py plain">, </code><code class="py string">'41223133'</code><code class="py plain">, </code><code class="py string">'hong41223129'</code><code class="py plain">, </code><code class="py string">'41223110'</code><code class="py plain">, </code><code class="py string">'41223147'</code><code class="py plain">, </code><code class="py string">'Linjiahong41223125'</code><code class="py plain">, </code><code class="py string">'CHN41223132'</code><code class="py plain">, </code><code class="py string">'Yu-Fang-Hong'</code><code class="py plain">, </code><code class="py string">'41023111'</code><code class="py plain">, </code><code class="py string">'yckaooooo'</code><code class="py plain">, </code><code class="py string">'kolas911205'</code><code class="py plain">, </code><code class="py string">'41023105'</code><code class="py plain">, </code><code class="py string">'40932134'</code><code class="py plain">, </code><code class="py string">'41223104'</code><code class="py plain">, </code><code class="py string">'yan41223101'</code><code class="py plain">, </code><code class="py string">'41223105'</code><code class="py plain">, </code><code class="py string">'41223153'</code><code class="py plain">, </code><code class="py string">'41223120'</code><code class="py plain">, </code><code class="py string">'41223152'</code><code class="py plain">, </code><code class="py string">'G8People'</code><code class="py plain">, </code><code class="py string">'WSE41223112'</code><code class="py plain">, </code><code class="py string">'41223146'</code><code class="py plain">, </code><code class="py string">'41223119'</code><code class="py plain">]</code></div>
<div class="line number6 index5 alt1"><code class="py spaces"> </code> </div>
<div class="line number7 index6 alt2"><code class="py comments"># 顯示甲班標題</code></div>
<div class="line number8 index7 alt1"><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"甲班:"</code><code class="py plain">)</code></div>
<div class="line number9 index8 alt2"><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py plain">all_stud:</code></div>
<div class="line number10 index9 alt1"><code class="py spaces">    </code><code class="py plain">drop_n </code><code class="py keyword">=</code> <code class="py plain">i.rstrip(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number11 index10 alt2"><code class="py spaces">    </code><code class="py plain">stud </code><code class="py keyword">=</code> <code class="py plain">drop_n.split(</code><code class="py string">"\t"</code><code class="py plain">)</code></div>
<div class="line number12 index11 alt1"><code class="py spaces">    </code><code class="py plain">stud_num </code><code class="py keyword">=</code> <code class="py plain">stud[</code><code class="py value">0</code><code class="py plain">]</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">    </code><code class="py plain">stud_github </code><code class="py keyword">=</code> <code class="py plain">stud[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">stud_github </code><code class="py keyword">not</code> <code class="py keyword">in</code> <code class="py plain">a_all_members:</code></div>
<div class="line number15 index14 alt2"><code class="py spaces">        </code><code class="py functions">print</code><code class="py plain">(stud_num)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><a href="https://mdecd2025.github.io/2a-ag4/content/Brython.html?src=https://gist.githubusercontent.com/zhe41223118/fcdf65c3206155c5cd56140e47c6c87d/raw/8a5262e66228212fbc4f862ceaf67c798c9fb54c/2a-1">2a未加入團隊學員</a></p>
<h2>task5</h2>
<p><strong>Webots簡介摘要</strong></p>
<div>
<ul>
<li class="break-words"><strong>What is Webots?</strong><br/> Webots is a professional mobile robot simulation software that provides a rapid prototyping environment. It allows users to create 3D virtual worlds with physics properties (e.g., mass, joints, friction) and add passive or active objects like mobile robots. Users can equip robots with sensors and actuators and program them for desired behaviors. It offers numerous robot models, examples, and interfaces to transfer simulations to real robots like e-puck or Nao.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>What can I do with Webots?</strong><br/> Webots is ideal for research and education in mobile robotics, supporting projects like robot prototyping (e.g., academic, automotive, toy industries), locomotion research (legged, humanoid robots), multi-agent studies (swarm intelligence, collaborative robots), and adaptive behavior research (genetic algorithms, AI). It’s also used for teaching robotics and robot competitions.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>What do I need to know to use Webots?</strong><br/> Basic knowledge of C, C++, Java, Python, or MATLAB is required to program controllers, though beginners can use the graphical BotStudio language for certain robots (e.g., e-puck). To create custom models or environments, familiarity with 3D graphics and VRML97 is needed for designing or importing 3D objects.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>How do I get User Support?</strong><br/> Cyberbotics offers paid support via Premier Service plans and custom development. Community-based support is available through Robotics StackExchange (webots tag), GitHub Discussions (development questions), GitHub Issues (bug reports), and Discord (quick discussions), though responses aren’t guaranteed.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>Webots Simulation</strong><br/> A Webots simulation consists of a world file (.wbt) defining robots and their environment, controller programs (in C/C++/Java/Python/MATLAB), and an optional physics plugin (in C/C++) to adjust physics behavior. World files may rely on external PROTO files and textures.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>What is a World?</strong><br/> A "world" in Webots is a 3D description of robots and their environment, detailing properties like position, geometry, appearance, and physics. Organized hierarchically (like VRML97), world files (.wbt) specify controller names but don’t include the controller code itself.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>What is a Controller?</strong><br/> A controller is a program that directs a robot in a world file, written in C, C++, Java, Python, or MATLAB. Webots launches each controller as a separate process per robot at simulation start. Some languages require compilation (e.g., C/C++), others interpretation (e.g., Python), with files stored in the "controllers" subdirectory.</li>
</ul>
<p></p>
<ul>
<li class="break-words"><strong>What is a Supervisor Controller?</strong><br/> A supervisor controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions (e.g., simulation control, moving robots, recording videos) typically reserved for human operators. Written in any supported language, it has greater capabilities than standard controllers.</li>
</ul>
</div>
<h2>task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p>題目要求尺寸：<span>利用 box 幾何外形節點建立平面四連桿機構的模擬場景，要求地面<span style="background-color: #ccffff;">固定桿長度 1m，寬高各為 0.1m，第一桿長度 0.4m，第二桿長度 0.6m，第三桿長度 0.9m。</span></span></p>
<p>操作影片:</p>
<p><a href="/downloads/41223134 worlds.7z">檔案下載</a></p>
<p><span style="background-color: #00ffff;"></span></p>
<p></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p>將<a href="https://mdecd2025.github.io/hw-41223134/content/task3">task3</a>繪製好的連桿以程式切割後導入webots組配模擬。(如果使用舊版本可攜程式需 <span style="background-color: #ccffcc;">pip install numpy</span> 安裝<a href="https://medium.com/@chiukevin08/numpy%E4%BB%8B%E7%B4%B9-61eb7f288b8d">NumPy</a> 套件，否則程式將如法執行)</p>
<p></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:每週課程內容整理放置於<a href="https://mdecd2025.github.io/hw-41223134/content/w1">上課內容</a></p>
<p>各週網頁內容:</p>
<p>第一~三週為更新python版本更新、使用可攜環境及python程式列出課程尚未分組名單</p>
<p>第四~五週為設定putty建立金鑰、設定個人ipv6網路及網址</p>
<p>第六~八週為<strong></strong>solvespace繪製四連桿和投石機零件+組裝、使用webots製作場景連桿及模擬</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8bazTOCVeU4" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>